# –ò–º–ø–æ—Ä—Ç
import json
import openpyxl
import pandas as pd
import os
import datetime

'''
        –ö–ª–∞—Å—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
'''



class DataBase:
    def __init__(self, logger):

        self.logger = logger

        if os.path.isfile("data.json"):
            self.base = json.load(open("data.json"))
            self.logger.success('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∂–µ–Ω–∞')
        else:
            # –§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω
            self.logger.error('–§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –±—ã–ª –ø–æ–≤—Ä–µ–∂–¥—ë–Ω.')
            # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã
            self.base = {
                "users":[],
                "cdl":[]
            }

        self.base_cdl = self.base['cdl']
        self.base_users = self.base['users']
        # self.base_phone = self.base['phone']

    def save_base(self):
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª

        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –æ–±—â—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é self.base
        self.base['cdl'] = self.base_cdl
        #self.base['sdl'] = self.base_phone
        self.base['users'] = self.base_users

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
        with open("data.json", "w") as base_file:
            json.dump(self.base, base_file)

        self.logger.info('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞')

        return

    def disconnect(self):
        # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        self.save_base()

        self.logger.info('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫–ª—é—á–µ–Ω–∞')
        return



    #   C D L
    def get_sdl_procent_filter(self, bundle):
        bundle_dict_sorted = []
        result = []

        # C–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞
        bundle_dict = dict(sorted(bundle.items(),reverse=True, key=lambda item: item[1]))
        for lot in bundle_dict:
            #print(lot)
            bundle_dict_sorted.append(lot)

        # –ü–æ–¥—Ç—è–≥–∏–≤–∞–µ–º –≤–µ—Å—å –ª–æ—Ç –ø–æ –µ–≥–æ —Ç–µ–∫—Å—Ç—É
        for text_for_bundle in bundle_dict_sorted:
            for lot_sdl in self.base_cdl:

                if text_for_bundle == lot_sdl['text']:
                    #print(text_for_bundle)
                    # –ù–∞—à–ª–æ—Å—å —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å —Å–ø–∏—Å–∫–æ–º –≤—Å–µ—Ö SDL
                    result.append(lot_sdl)


        return result

    def get_sdl(self, text):
        # –ü–æ–∏—Å–∫ –ø–æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ç–µ–∫—Å—Ç—É
        # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–æ–º–µ—Ä–æ–≤

        #   –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        results = [] # –°–ø–∏—Å–æ–∫ SDL –Ω–æ–º–µ—Ä–æ–≤ –¥–ª—è return
        array_text = list(str(text).lower()) # –¢–µ–∫—Å—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –≤ –≤–∏–¥–µ –º–∞—Å—Å–∏–≤–∞
        procent_lot = 0  # –ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ª–æ—Ç–∞ –∫ —Ç–µ–∫—Å—Ç—É
        procent_offset = round(100 / len(array_text)-1, 3)  # –í —Å–ª—É—á–∞–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —ç—Ç–æ —á–∏—Å–ª–æ –ø—Ä–∏–±–∞–≤–ª—è–µ—Ç—Å—è –∫ –ø—Ä–æ—Ü–µ–Ω—Ç—É
        procent_threshol = 70 # –ü–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∑–∞–Ω–µ—Å–µ–Ω–∏—è –ª–æ—Ç–∞ –≤ results
        bundle_dict = {} # –°–≤—è–∑–∫–∞ —Ç–µ–∫—Å—Ç–∞ SDL –ª–æ—Ç–∞ –ø—Ä–æ—Ç–∏–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞

        #   –ê–ª–≥–æ—Ä–∏—Ç–º
        # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –±–∞–∑—É SDL
        for lot in self.base_cdl:
            lot_search_text = str(lot['text']).lower() + str(lot["region"])
            # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç SDL –≤ –ª–æ—Ç–µ
            for lot_letter_index, lot_letter_item in enumerate(lot_search_text): # - lot['text'].lower()

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
                if lot_letter_index < len(array_text):
                    if array_text[lot_letter_index] == '*' or array_text[lot_letter_index] == lot_letter_item:
                        # –ï—Å–ª–∏ —Å–æ–≤–ø–∞–ª, –ø—Ä–∏–±–∞–≤–ª—è–µ–º procent_offset –∫ procent_lot
                        procent_lot += procent_offset
                else:
                    break

            # –ï—Å–ª–∏ –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã—à–µ procent_threshol, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –≤ bundle_dict
            if procent_lot >= procent_threshol:
                bundle_dict[str(lot['text'])] = procent_lot
            procent_lot = 0

        # –ö–æ–ª–∏–±—Ä–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ —Å –ø–æ–º–æ—â—å—é self.get_sdl_procent_filter
        results = self.get_sdl_procent_filter(bundle_dict)

        # –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if len(results) != 0:
            return results
        else:
            return 0

    def sdl_update(self):
        # –ü–æ–ª—É—á–∞–µ—Ç xlsx —Ñ–∞–π–ª
        # –û–±—Ä–∞–±–∞—Ç—ã–µ–≤–∞–µ—Ç xlsx –∏ –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç –≤ –±–∞–∑—É json
        # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True/False

        # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–∑ —Ç–∞–±–ª–∏—Ü—ã cdl
        new_base = []

        # –û—Ç–∫—Ä—ã–≤–∞–µ–º database.xlsx –¥–ª—è openpyxl –∏ —á–∏—Ç–∞–µ–º —Å –ø–æ–º–æ—â—å—é pandas
        wookbook = openpyxl.load_workbook("database.xlsx")
        pd_data = pd.read_excel('database.xlsx')

        # –ü—Ä–µ–≤—Ä–∞—â–∞–µ–º pd –æ–±—Ä–∞–∑ –≤ json
        raw_json_data = json.loads(pd_data.to_json())

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–±–ª–∏—á–Ω–æ–≥–æ json
        for index, index_item in raw_json_data['–ü–†–û–î–ê–ï–¢–°–Ø'].items():
            index_str = str(index)
            if raw_json_data['–ü–†–û–î–ê–ï–¢–°–Ø'][index_str] != None:
                # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö

                # TEXT

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å—Ç–æ–±—Ü–∞
                if raw_json_data['–ü–†–û–î–ê–ï–¢–°–Ø'] is not None:
                    item_text = raw_json_data['–ü–†–û–î–ê–ï–¢–°–Ø'][index_str].replace("\t", "")
                    item_text = item_text.replace(" ", "")
                    item_text = item_text.replace("*", "?")

                    # –ü—Ä–µ–≤—Ä–∞—â–∞–µ–º –∏–∑ –±—É–∫–≤—ã "–û" –≤ 0
                    if item_text[1] == "–û":
                        item_text = item_text[:1] + str(0) + item_text[1 + 1:]
                    if item_text[2] == "–û":
                        item_text = item_text[:2] + str(0) + item_text[2 + 1:]
                    if item_text[3] == "–û":
                        item_text = item_text[:3] + str(0) + item_text[3 + 1:]
                else:
                    # –°—Ç–æ–ª–±–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω
                    self.logger.error("–°—Ç–æ–ª–±–µ—Ü '–ü—Ä–æ–¥–∞—ë—Ç—Å—è' –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return False

                # REGION
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å—Ç–æ–±—Ü–∞
                if raw_json_data['–†–ï–ì.'] is not None:
                    if raw_json_data['–†–ï–ì.'][index_str] is not None:
                        item_region = str(raw_json_data['–†–ï–ì.'][index_str]).replace('.0', '')
                    else:
                        item_region = ""
                else:
                    # –°—Ç–æ–ª–±–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω
                    self.logger.error("–°—Ç–æ–ª–±–µ—Ü '–†–µ–≥.' –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return False

                # PRICE
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å—Ç–æ–±—Ü–∞
                if raw_json_data['–¶–ï–ù–ê'] is not None:
                    if raw_json_data['–¶–ï–ù–ê'][index_str] == "–∏–Ω—Ñ —Å–∫—Ä":
                        item_price = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–∫—Ä—ã—Ç–∞"
                    elif raw_json_data['–¶–ï–ù–ê'][index_str] == "–∏–Ω—Ñ —É –∞–¥–º":
                        item_price = "–£—Ç–æ—á–Ω—è–π—Ç–µ —É –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
                    elif raw_json_data['–¶–ï–ù–ê'][index_str] == "—É –∞–¥–º–∏–Ω–∞":
                        item_price = "–£—Ç–æ—á–Ω—è–π—Ç–µ —É –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
                    elif raw_json_data['–¶–ï–ù–ê'][index_str] == "–∫ –∞–¥–º–∏–Ω—É":
                        item_price = "–£—Ç–æ—á–Ω—è–π—Ç–µ —É –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
                    elif raw_json_data['–¶–ï–ù–ê'][index_str] == "—Ä–æ–∑—ã–≥—Ä—ã—à –≤ —Ä—É–ª–µ—Ç–∫–µ":
                        item_price = "–†–∞–∑—ã–≥—Ä—ã–≤–∞–µ—Ç—Å—è –≤ —Ä—É–ª–µ—Ç–∫–µ"
                    elif raw_json_data['–¶–ï–ù–ê'][index_str] == "–ø–∞—Ä–∞":
                        item_price = "–ü—Ä–æ–¥–∞—ë—Ç—Å—è –≤ –ø–∞—Ä–µ"
                    elif raw_json_data['–¶–ï–ù–ê'][index_str] == "–¥–æ–≥–æ–≤":
                        item_price = "–î–æ–≥–æ–≤–æ—Ä–Ω–∞—è —Ü–µ–Ω–∞"
                    elif raw_json_data['–¶–ï–ù–ê'][index_str] is None:
                        item_price = "–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
                    else:
                        item_price = str(raw_json_data['–¶–ï–ù–ê'][index_str]).replace("üî•", "") + ".000"
                else:
                    # –°—Ç–æ–ª–±–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω
                    self.logger.error("–°—Ç–æ–ª–±–µ—Ü '–¶–µ–Ω–∞' –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return False

                # KEY
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å—Ç–æ–±—Ü–∞
                if raw_json_data['–£–°–õ–û–í–ò–ï'] is not None:
                    if raw_json_data['–£–°–õ–û–í–ò–ï'][index_str] == " üîë ":
                        item_key = " üîë "
                    elif raw_json_data['–£–°–õ–û–í–ò–ï'][index_str] == "–ù–ê –†–£–ö–ò":
                        item_key = ""
                    elif raw_json_data['–£–°–õ–û–í–ò–ï'][index_str] is None:
                        item_key = ""
                    elif raw_json_data['–£–°–õ–û–í–ò–ï'][index_str] == "–±—Ä–æ–Ω—å":
                        item_key = "(–∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ)"
                    elif raw_json_data['–£–°–õ–û–í–ò–ï'][index_str] == "—Ç–æ—Ä–≥ —Å —Ö–æ–∑—è–∏–Ω–æ–º":
                        item_key = ""
                    else:
                        item_key = ""
                else:
                    # –°—Ç–æ–ª–±–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω
                    self.logger.error("–°—Ç–æ–ª–±–µ—Ü '–£—Å–ª–æ–≤–∏–µ' –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return False

                new_lot = {
                    "id":0,
                    "text": item_text,
                    "region": item_region,
                    "price": item_price,
                    "key": item_key
                }

                new_base.append(new_lot)

        # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        self.base_cdl = new_base

        # –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        for index_lot_cdl, lot_cdl in enumerate(self.base_cdl):
            self.base_cdl[index_lot_cdl]['id'] = index_lot_cdl

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        self.save_base()

        # –£–¥–∞–ª—è–µ–º database.xlsx
        os.remove('database.xlsx')

        return True

    def get_group(self, group):
        # –§—É–Ω–∫—Ü–∏—è –¥–µ–ª–∞–µ—Ç –≤—ã–±–æ—Ä–∫—É —Å—Ä–µ–¥–∏ –Ω–æ–º–µ—Ä–æ–≤ –ø–æ –æ–±—â–µ–º—É –ø—Ä–∏–∑–Ω–∞–∫—É

        result_list_cdl = [] # C–ø–∏—Å–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥ –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏

        if group == "identical_letters":
            # –û–¥–∏–Ω–∞–∫–æ–≤—ã–µ –±—É–∫–≤—ã "–ê***–ê–ê"
            self.logger.info("–í—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è identical letters")

            # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–æ–º–µ—Ä–æ–≤
            for lot in self.base_cdl:
                lot_text = lot["text"]
                if lot_text[0] == lot_text[4] and lot_text[4] == lot_text[5]:
                    # –ï—Å–ª–∏ —Å–æ–≤–ø–∞–ª–∏ 1, 5 –∏ 6 –±—É–∫–≤–∞
                    result_list_cdl.append(lot)

        elif group == "identical_numbers":
            # –û–¥–∏–Ω–∞–∫–æ–≤—ã–µ —Ü–∏—Ñ—Ä—ã "*777**"
            self.logger.info("–í—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è identical numbers")

            # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–æ–º–µ—Ä–æ–≤
            for lot in self.base_cdl:
                lot_text = lot["text"]
                if lot_text[1] == lot_text[2] and lot_text[2] == lot_text[3]:
                    # –ï—Å–ª–∏ —Å–æ–≤–ø–∞–ª–∏ 2, 3 –∏ 4 —Ü–∏—Ñ—Ä–∞
                    result_list_cdl.append(lot)

        return result_list_cdl


    #   U S E R S
    def create_user(self, user_message):
        # –°–æ–∑–¥–∞—ë—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—é

        today_date = datetime.datetime.today()  # –°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞
        str_today_date = datetime.datetime.strftime(today_date, "%d.%m.%Y")

        new_user = {
            "id": int(user_message.from_user.id),
            "status": "user",
            "history":[],# –î–ª—è –∑–∞–ø–∏—Å–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            "date_create":str(str_today_date) # –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∞—É–Ω—Ç–∞
        }
        if user_message.from_user.first_name is not None:
            new_user['first_name'] = str(user_message.from_user.first_name)

        if user_message.from_user.username is not None:
            new_user['username'] = str(user_message.from_user.username)

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–ø–∏—Å–æ–∫ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
        self.base_users.append(new_user)
        self.save_base()
        self.logger.success("–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - " + str(user_message.from_user.id))

        return new_user

    def add_request(self, user, text):
        # –î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –µ–≥–æ –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        for index_user, item_user in enumerate(self.base_users):
            if user['id'] == item_user['id']:
                # –ù–∞—à—ë–ª—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å

                # –°–æ–∑–¥–∞–Ω–∏–µ –ª–æ—Ç–∞
                new_lot = {
                    "text":text,
                    "datetime":str(datetime.datetime.now())
                }
                self.base_users[index_user]['history'].append(new_lot)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º—Å—è
                self.save_base()

    def get_user(self, user_message):
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = int(user_message.from_user.id)

        # –ü–µ—Ä–µ–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        for item_user in self.base_users:
            if item_user['id'] == user_id:
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω
                return item_user
        else:
            # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
            self.logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID[" + str(user_id) + "] - –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.")

            return self.create_user(user_message) # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è



    #   S t a t i s t i c s
    def get_statistics(self):
        # C–æ–±–∏—Ä–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏—Ö –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã—Ö –Ω–æ–º–µ—Ä–æ–≤(–∏—Ö –∫–æ–ª-–≤–æ)
        result_count_new_user = 0 # –°—á—ë—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        result_count_request = 0 # –°—á—ë—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ –¥–µ–Ω—å
        today_date = datetime.datetime.today() # –°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞
        str_today_date = datetime.datetime.strftime(today_date, "%d.%m.%Y") # –°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω–∞—è –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è —Å–º–µ–Ω—ã —Ñ–æ—Ä–º–∞—Ç–∞

        # –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –ø–æ –Ω–æ–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        for item_user in self.base_users:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_date_registration = datetime.datetime.strptime(item_user["date_create"], "%d.%m.%Y")

            # –ï—Å–ª–∏ –¥–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–≤–ø–∞–ª–∞ —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π —Ç–æ –ø—Ä–∏–±–∞–≤–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫
            if user_date_registration == datetime.datetime.strptime(str_today_date, "%d.%m.%Y"):
                result_count_new_user+=1

        # –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –æ –Ω–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö
        for lot in self.base_users:
            if lot['history'] is not None:
                for request_from_history in lot['history']:
                    user_request_date = datetime.datetime.strptime(request_from_history["datetime"], "%Y-%m-%d %H:%M:%S.%f")

                    if user_request_date.date() == datetime.date.today():
                        result_count_request+=1

        return result_count_new_user, result_count_request


